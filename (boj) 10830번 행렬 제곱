#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<vector<ll>> matrix;
ll mod = 1000;

matrix operator * (const matrix& a, const matrix& b) {
	ll size = a.size();
	matrix res(size, vector<ll>(size));
	for (int i = 0; i < size; i++) {
		for (int j = 0; j < size; j++) {
			for (int k = 0; k < size; k++) {
				res[i][j] += a[i][k] * b[k][j];
			}
			res[i][j] %= mod;
		}
	}
	return res;
}
matrix power(matrix a, ll n) {
	ll size = a.size();
	matrix res(size, vector<ll>(size));
	for (int i = 0; i < size; i++)
		res[i][i] = 1;
	while (n > 0) {
		if (n % 2) {
			res = res * a;
		}
		a = a * a;
		n /= 2;
	}
	return res;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	ll n, k; cin >> n >> k;
	matrix res(n, vector<ll>(n));
	for (int i = 0; i < n;i++) {
		for (int j = 0; j < n;j++) {
			cin >> res[i][j];
		}
	}
	matrix ans = (power(res, k));
	for (auto i:ans) {
		for (auto j : i) {
			cout << j << " ";
		}
		cout << "\n";
	}
}
